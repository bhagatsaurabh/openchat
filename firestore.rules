rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn(request) {
    	return request.auth != null;
    }
    function signedInUser(request, userId) {
    	return signedIn(request) && request.auth.uid == userId;
    }
    function validateUserCreation(request) {
      let input = request.resource.data;
      let validKeys = ['name', 'avatarUrl', 'id'];
      let isValid = input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys.concat(['phone'])) &&
                    input.name is string && input.id is string &&
                    input.avatarUrl is string &&
                    ('phone' in input ? input.phone is string : true);
    	return isValid &&
             input.name.matches('^.[^!@#\\$%\\^&\\*\\(\\)\\+=\\{\\}\\[\\]`~:;"?/<>]{3,}$') &&
             input.id == request.auth.uid &&
             ('phone' in input ? input.phone == request.auth.token.phone_number : true);
    }
    function validateUserUpdation(request, resource) {
      let existing = resource.data;
    	let input = request.resource.data;
      let validKeys = ['name', 'avatarUrl', 'id', 'phone'];
      let isValid = input.keys().hasOnly(validKeys) && input.keys().hasAny(validKeys) &&
                    input.name is string && input.avatarUrl is string &&
                    input.id is string && ('phone' in input ? input.phone is string : true);
    	return isValid &&
             input.name.matches('^.[^!@#\\$%\\^&\\*\\(\\)\\+=\\{\\}\\[\\]`~:;"?/<>]{3,}$') &&
             input.id == existing.id &&
             ('phone' in existing
               ? input.phone == existing.phone
               : ('phone' in input
                   ? input.phone == request.auth.token.phone_number
                   : true
                 )
             );
    }
    function isAMember(request, resource) {
    	return signedIn(request) && request.auth.uid in resource.data.members;
    }
    function isAnAdmin(request, resource) {
    	return isAMember(request, resource) && request.auth.uid in resource.data.admins;
    }
    function validateNewMembership(request) {
    	return request.auth.uid in request.resource.data.members;
    }
    function validateExistingMembership(userId, existing) {
    	return userId in existing.members;
    }
    function validateNewAdminship(request) {
    	return request.auth.uid in request.resource.data.admins;
    }
    function validateExistingAdminship(userId, existing) {
    	return userId in existing.admins;
    }
    function validateBCGroupCreation(input, request) {
      let isValid = input.members.toSet().size() > 2 && input.admins.toSet().size() > 0;
      let check1 = isValid && input.members[0] is string && exists(/databases/$(database)/documents/users/$(input.members[0]));
      let check2 = check1 && input.members[1] is string && exists(/databases/$(database)/documents/users/$(input.members[1]));
      let checkF = check2 && input.members[2] is string && exists(/databases/$(database)/documents/users/$(input.members[2]));

      return checkF && validateNewMembership(request) && validateNewAdminship(request);
    }
    function validateDMGroupCreation(input, request) {
      let isValid = input.members.toSet().size() == 2 && input.admins.toSet().size() == 2 &&
                    input.members[0] is string && input.members[1] is string &&
                    input.members[0] == input.admins[0] && input.members[1] == input.admins[1] &&
                    input.members[0] == request.auth.uid;
      let otherUser = isValid ? get(/databases/$(database)/documents/users/$(input.members[1])).data : {};
      
      return isValid && validateNewMembership(request) && validateNewAdminship(request) &&
             input.avatarUrl == otherUser.avatarUrl &&
             input.name == otherUser.name;
    }
    function validateGroupCreation(request) {
      let input = request.resource.data;
      let validKeys = ['name', 'members', 'admins', 'active', 'type', 'seen', 'sync', 'timestamp', 'avatarUrl'];
      let isValid = input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys) &&
                    input.active is bool && input.members is list &&
                    input.name is string && input.name.matches('^.[^!@#\\$%\\^&\\*\\(\\)\\+=\\{\\}\\[\\]`~:;"?/<>]{3,}$') &&
                    input.admins is list && input.type is string &&
                    input.type in ['broadcast', 'private'] &&
                    input.avatarUrl is string &&
                    input.seen is map && request.auth.uid in input.seen && input.seen.keys().size() == 1 &&
                    input.seen[request.auth.uid] is timestamp && input.seen[request.auth.uid] == request.time &&
                    input.sync is map && request.auth.uid in input.sync && input.sync.keys().size() == 1 &&
                    input.sync[request.auth.uid] is timestamp && input.sync[request.auth.uid] == request.time &&
                    input.timestamp is timestamp && input.timestamp == request.time;
    	return isValid && input.active == true &&
             (input.type == 'broadcast'
               ? validateBCGroupCreation(input, request)
               : validateDMGroupCreation(input, request));
    }
    function validateDMGroupUpdation(input, existing) {
      let validKeys = ['seen', 'sync'];
      return input.keys().hasOnly(validKeys) && input.keys().hasAny(validKeys) &&
             ('seen' in input
               ? (input.seen is map && input.seen.diff(existing.seen).affectedKeys().hasOnly(request.auth.uid) &&
                 input.seen[request.auth.uid] is timestamp && input.seen[request.auth.uid] == request.time)
               : true) &&
             ('sync' in input
               ? (input.sync is map && input.sync.diff(existing.sync).affectedKeys().hasOnly(request.auth.uid) &&
                 input.sync[request.auth.uid] is timestamp && input.sync[request.auth.uid] == request.time)
               : true);
    }
    function validateBCGroupUpdation(input, existing) {
      let validKeys = ['seen', 'sync', 'name', 'members', 'admins', 'active', 'avatarUrl'];

      return input.keys().hasOnly(validKeys) && input.keys().hasAny(validKeys) &&
             ('active' in input
               ? (validateExistingAdminship(request.auth.uid, existing) &&
                 input.active is bool && input.active != existing.active)
               : true) &&
             ('members' in input
               ? (validateExistingAdminship(request.auth.uid, existing) &&
                 input.members is list && validateNewMembership(request) &&
                 input.members.toSet().size() > 2 &&
                 input.members[0] is string && exists(/databases/$(database)/documents/users/$(input.members[0])) &&
                 input.members[1] is string && exists(/databases/$(database)/documents/users/$(input.members[1])) &&
                 input.members[2] is string && exists(/databases/$(database)/documents/users/$(input.members[2])))
               : true) &&
             ('admins' in input
               ? (validateExistingAdminship(request.auth.uid, existing) &&
                 input.admins is list && validateNewAdminship(request) &&
                 input.admins.toSet().size() > 0)
               : true) &&
             ('seen' in input
               ? (validateExistingMembership(request.auth.uid, existing) &&
                 input.seen is map && input.seen.diff(existing.seen).affectedKeys().hasOnly(request.auth.uid) &&
                 input.seen[request.auth.uid] is timestamp && input.seen[request.auth.uid] == request.time)
               : true) &&
             ('sync' in input
               ? (validateExistingMembership(request.auth.uid, existing) &&
                 input.sync is map && input.sync.diff(existing.sync).affectedKeys().hasOnly(request.auth.uid) &&
                 input.sync[request.auth.uid] is timestamp && input.sync[request.auth.uid] == request.time)
               : true) &&
             ('name' in input
               ? (validateExistingAdminship(request.auth.uid, existing) &&
                 input.name is string && input.name.matches('^.[^!@#\\$%\\^&\\*\\(\\)\\+=\\{\\}\\[\\]`~:;"?/<>]{3,}$'))
               : true) &&
             ('avatarUrl' in input
               ? (validateExistingAdminship(request.auth.uid, existing) &&
                 input.avatarUrl is string)
               : true);
    }
    function validateGroupUpdation(request, resource) {
      let input = request.resource.data;
      let existing = resource.data;
    	return existing.type == 'private'
               ? validateDMGroupUpdation(input, existing)
               : validateBCGroupUpdation(input, existing);
    }
    function isGroupActive(resource) {
      return resource.data.active
    }
    function validateMessageCreation(request) {
      let input = request.resource.data;
      let validKeys = ['by', 'timestamp', 'expiry', 'text', 'type'];
      let isValid = input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys.concat(['mimetype'])) &&
                    input.by is string && input.text is string &&
                    input.timestamp is timestamp && input.timestamp == request.time &&
                    input.expiry is timestamp &&
                    ('mimetype' in input ? input.mimetype is string : true);
      let delta = isValid ? input.expiry.toMillis() - request.time.toMillis() : 0;
      return isValid && input.by == request.auth.uid &&
             delta > 777600000 && delta < 950400000
    }
    function validateMessageUpdation(request) {
      let input = request.resource.data;
      let validUpdationKeys = ['by', 'timestamp', 'expiry', 'text', 'type', 'ref'];
      let validDeletionKeys = ['by', 'timestamp', 'expiry', 'type', 'ref'];
      let isValid = 'type' in request.resource.data && request.resource.data.type is string &&
                    (input.type == 'meta:edit'
                      ? (input.keys().hasAll(validUpdationKeys) && input.keys().hasOnly(validUpdationKeys))
                      : (input.keys().hasAll(validDeletionKeys) && input.keys().hasOnly(validDeletionKeys))) &&
                    input.by is string && input.by == request.auth.uid &&
                    input.timestamp is timestamp && input.timestamp == request.time &&
                    input.expiry is timestamp && input.ref is string &&
                    (input.type == 'meta:edit' ? input.text is string : true);
      let delta = isValid ? input.expiry.toMillis() - request.time.toMillis() : 0;
      return isValid && delta > 777600000 && delta < 950400000;
    }
    function validateMessage(request) {
      let input = request.resource.data;
      return 'type' in input && input.type is string &&
             (input.type in ['text', 'file']
               ? validateMessageCreation(request)
               : (input.type in ['meta:edit', 'meta:delete']
                 ? validateMessageUpdation(request)
                 : false));
    }
    function validateNotifyTypeGA(input) {
      let validKeys = ['id', 'encryptedKey'];
      let isValid = input.payload.keys().hasAll(validKeys) && input.payload.keys().hasOnly(validKeys) &&
                    input.payload.id is string &&
                    input.payload.encryptedKey is string;
      let group = isValid ? get(/databases/$(database)/documents/groups/$(input.payload.id)).data : {};
      return isValid && request.auth.uid in group.members && input.by in group.members &&
             input.by in group.admins;
    }
    function validateNotifyTypeGR(input) {
      let validKeys = ['id'];
      let isValid = input.payload.keys().hasAll(validKeys) && input.payload.keys().hasOnly(validKeys) &&
                    input.payload.id is string;
      let group = isValid ? get(/databases/$(database)/documents/groups/$(input.payload.id)).data : {};
      return isValid && request.auth.uid in group.members && input.by in group.members &&
             input.by in group.admins && group.type != 'private';
    }
    function validateNotifyCreation(request) {
      let input = request.resource.data;
      let validKeys = ['type', 'payload', 'by', 'timestamp'];
      return input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys) &&
             input.type is string && input.type in ['group:add', 'group:remove'] &&
             input.timestamp is timestamp && input.timestamp == request.time &&
             input.by is string && exists(/databases/$(database)/documents/users/$(input.by)) &&
             input.payload is map &&
             (input.type == 'group:add' ? validateNotifyTypeGA(input) : true) &&
             (input.type == 'group:remove' ? validateNotifyTypeGR(input) : true);
    }

    match /publicKeys/{userId} {
      // Anyone can read other user's publicKey
      allow read: if signedIn(request)
      // A user can create/update their own publicKey
      allow create, delete: if signedInUser(request, userId)
      // publicKey cannot be updated
      allow update: if false
    }

    // Anyone can read other user's profile, but cannot write to it
    match /users/{userId} {
    	allow create: if signedInUser(request, userId) && validateUserCreation(request)
      allow read: if signedIn(request)
      allow update: if signedInUser(request, userId) && validateUserUpdation(request, resource)
      allow delete: if signedInUser(request, userId)
    }
    
    // A user can create notifications to any other user
    // A user cannot read/delete other user's notifications
    // Updating notifications is not allowed
    match /users/{userId}/notify/{notification} {
      allow create: if signedIn(request) && validateNotifyCreation(request)
      allow read: if signedInUser(request, userId)
      allow update: if false
      allow delete: if signedInUser(request, userId)
    }

    // A user can only read chats if they are a member and update chats if they are an admin
    // A user can only create a chat if they are a member and an admin
    // Direct deletion is not allowed due to firestore limitations on collection
    match /groups/{chatId} {
      allow create: if signedIn(request) && validateGroupCreation(request)
    	allow read: if isGroupActive(resource) && isAMember(request, resource)
      allow update: if isGroupActive(resource) && isAnAdmin(request, resource) && validateGroupUpdation(request, resource)
      allow delete: if false
    }

    // Any user can create a message according to rules
    // No direct updation/deletion allowed (achieved indirectly through creating a meta message)
    match /groups/{chatId}/messages/{messageId} {
      allow create: if signedIn(request) && validateMessage(request)
      allow update: if false
      allow delete: if false
    }
  }
}