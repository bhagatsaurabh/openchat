rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn(request) {
    	return request.auth != null;
    }
    function signedInUser(request, userId) {
    	return signedIn(request) && request.auth.uid == userId;
    }
    function validateUserCreation(request) {
      let input = request.resource.data;
      let validKeys = ['name', 'avatarUrl', 'id', 'phone'];
      let isValid = input.keys().hasAll(['profile']) && input.keys().hasOnly(['profile']) &&
                    input.profile is map &&
                    input.profile.hasAll(validKeys) && input.profile.hasOnly(validKeys) &&
                    input.profile.name is string && input.profile.id is string &&
                    input.profile.avatarUrl is string && input.profile.phone is string;
    	return isValid &&
             input.profile.name.matches('.[^!@#\\$%\\^&\\*\\(\\)\\+=\\{\\}\\[\\]`~:;"?/<>]{4,}') &&
             input.profile.id == request.auth.uid &&
             input.profile.phone == request.auth.token.phone_number;
    }
    function validateUserUpdation(request, resource) {
      let existing = resource.data;
    	let input = request.resource.data;
      let isValid = input.keys().hasAll(['profile']) && input.keys().hasOnly(['profile']) &&
                    input.profile is map && input.profile.hasOnly(['name', 'avatarUrl', 'id', 'phone']) &&
                    input.profile.name is string && input.profile.avatarUrl is string &&
                    input.profile.id is string && input.profile.phone is string;
    	return isValid &&
             input.profile.name.matches('.[^!@#\\$%\\^&\\*\\(\\)\\+=\\{\\}\\[\\]`~:;"?/<>]{4,}') &&
             input.profile.id == existing.id &&
             input.profile.phone == existing.phone;
    }
    function isAMember(request, resource) {
    	return signedIn(request) && request.auth.uid in resource.data.members;
    }
    function isAnAdmin(request, resource) {
    	return isAMember(request, resource) && request.auth.uid in resource.data.admins;
    }
    function validateGroupMembership(request) {
    	return request.auth.uid in request.resource.data.members;
    }
    function validateGroupAdminship(request) {
    	return request.auth.uid in request.resource.data.admins;
    }
    function validateBCGroupCreation(input, request) {
      let isValid = input.members.toSet().size() > 2 && input.admins.toSet().size() > 0;
      let check1 = isValid && input.members[0] is string && exists(/databases/$(database)/documents/users/$(input.members[0]));
      let check2 = check1 && input.members[1] is string && exists(/databases/$(database)/documents/users/$(input.members[1]));
      let checkF = check2 && input.members[2] is string && exists(/databases/$(database)/documents/users/$(input.members[2]));

      return checkF && validateGroupMembership(request) && validateGroupAdminship(request);
    }
    function validateDMGroupCreation(input, request) {
      let isValid = input.members.toSet().size() == 2 && input.admins.toSet().size() == 2 &&
                    input.members[0] == input.admins[0] && input.members[1] == input.admins[1];
      let check1 = isValid && input.members[0] is string && exists(/databases/$(database)/documents/users/$(input.members[0]));
      let checkF = check1 && input.members[1] is string && exists(/databases/$(database)/documents/users/$(input.members[1]));
      
      return validateGroupMembership(request) && validateGroupAdminship(request) && checkF
    }
    function validateGroupCreation(request) {
      let input = request.resource.data;
      let validKeys = ['members', 'admins', 'active', 'type', 'seen', 'timestamp'];
      let isValid = input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys) &&
                    input.active is bool && input.members is list &&
                    input.admins is list && input.type is string &&
                    input.type in ['broadcast', 'private'] &&
                    input.seen is map && request.auth.uid in input.seen && input.seen.keys().size() == 1 &&
                    input.seen[request.auth.uid] is timestamp && input.seen[request.auth.uid] < request.time &&
                    input.timestamp is timestamp;
    	return isValid && input.active == true &&
             input.type == 'broadcast'
               ? validateBCGroupCreation(input, request)
               : validateDMGroupCreation(input, request);
    }
    function validateDMGroupUpdation(input, existing) {
      return 'seen' in input
               ? input.seen is map && request.auth.uid in input.seen && input.seen.keys().size() == 1 &&
                 input.seen[request.auth.uid] is timestamp && input.seen[request.auth.uid] < request.time &&
                 input.seen[request.auth.uid] > existing.timestamp
               : false;
    }
    function validateBCGroupUpdation(input, existing) {
      let validKeys = ['members', 'admins', 'active'];

      return input.keys().hasOnly(validKeys) &&
             'active' in input ? input.active is bool && input.active != existing.active : true &&
             'members' in input
               ? input.members is list && validateGroupMembership(request) &&
                 input.members.toSet().size() > 2 &&
                 input.members[0] is string && exists(/databases/$(database)/documents/users/$(input.members[0])) &&
                 input.members[1] is string && exists(/databases/$(database)/documents/users/$(input.members[1])) &&
                 input.members[2] is string && exists(/databases/$(database)/documents/users/$(input.members[2]))
               : true &&
             'admins' in input
               ? input.admins is list && validateGroupAdminship(request) &&
                 input.admins.toSet().size() > 0
               : true &&
             'seen' in input
               ? input.seen is map && request.auth.uid in input.seen && input.seen.keys().size() == 1 &&
                 input.seen[request.auth.uid] is timestamp && input.seen[request.auth.uid] < request.time &&
                 input.seen[request.auth.uid] > existing.timestamp
               : true;
    }
    function validateGroupUpdation(request, resource) {
      let input = request.resource.data;
      let existing = resource.data;
    	return existing.type == 'private'
               ? validateDMGroupUpdation(input, existing)
               : validateBCGroupUpdation(input, existing);
    }
    function isGroupActive(resource) {
      return resource.data.active
    }
    function validateMessageCreation(request, chatId) {
      let input = request.resource.data;
      let validKeys = ['by', 'timestamp', 'expiry', 'text', 'type', 'unseenCount'];
      let isValid = input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys) &&
                    input.by is string && input.timestamp is timestamp &&
                    input.expiry is timestamp && input.text is string &&
                    input.unseenCount is int &&
                    input.unseenCount == get(/databases/$(database)/documents/groups/$(chatId)).data.members.size();
      let delta = isValid ? input.expiry.toMillis() - request.time.toMillis() : 0;
      return isValid && input.by == request.auth.uid &&
             delta > 1292400000 && delta < 1296000000
    }
    function validateMessageUpdation(request, chatId) {
      let input = request.resource.data;
      let validUpdationKeys = ['type', 'modified', 'text', 'id', 'expiry'];
      let validDeletionKeys = ['type', 'id', 'expiry'];
      let isValid = 'type' in request.resource.data && request.resource.data.type is string &&
                    input.type == 'meta:edit'
                      ? input.keys().hasAll(validUpdationKeys) && input.keys().hasOnly(validUpdationKeys) &&
                        input.modified is timestamp && input.text is string &&
                        input.id is string && input.expiry is timestamp
                      : input.keys().hasAll(validDeletionKeys) && input.keys().hasOnly(validDeletionKeys) &&
                        input.id is string && input.expiry is timestamp;
      let delta = isValid ? input.expiry.toMillis() - request.time.toMillis() : 0;
      let message = get(/databases/$(database)/documents/groups/$(chatId)/messages/$(request.resource.data.id)).data;
      return isValid && message.by == request.auth.uid &&
             delta > 82800000 && delta < 86400000;
    }
    function validateMessage(request, chatId) {
      let input = request.resource.data;
      return 'type' in input && input.type is string &&
             input.type in ['text', 'image', 'video', 'doc']
               ? validateMessageCreation(request, chatId)
               : input.type in ['meta:edit', 'meta:delete']
                 ? validateMessageUpdation(request, chatId)
                 : false;
    }
    function validateMessageDeletion(request, resource) {
      return request.auth.uid == resource.data.by;
    }
    function validateRecentMessageUpdation(request) {
      let input = request.resource.data;
      let validKeys = ['by', 'timestamp', 'text', 'type'];
      return input.keys().hasAll(validKeys) && input.keys().hasOnly(validKeys) &&
             input.by is string && input.by == request.auth.uid &&
             input.timestamp is timestamp && input.text is string &&
             input.type is string && input.type in ['text', 'image', 'video', 'doc'];
    }

    match /publicKeys/{userId} {
      // Anyone can read other user's publicKey
      allow read: if signedIn(request)
      // A user can create/update their own publicKey
      allow create, delete: if signedInUser(request, userId)
      // publicKey cannot be updated
      allow update: if false
    }

    // Anyone can read other user's profile, but cannot write to it
    match /users/{userId} {
    	allow create: if signedInUser(request, userId) && validateUserCreation(request)
      allow read: if signedIn(request)
      allow update: if signedInUser(request, userId) && validateUserUpdation(request, resource)
      allow delete: if signedInUser(request, userId)
    }

    // A user can only read chats if they are a member and update chats if they are an admin
    // A user can only create a chat if they are a member and an admin
    // Direct deletion is not allowed due to firestore limitations on collection
    match /groups/{chatId} {
      allow create: if signedIn(request) && validateGroupCreation(request)
    	allow read: if isGroupActive(resource) && isAMember(request, resource)
      allow update: if isGroupActive(resource) && isAnAdmin(request, resource) && validateGroupUpdation(request, resource)
      allow delete: if false
    }

    // Any user can create a message according to rules
    // No updation allowed (editing messages is achieved through creating a meta message)
    // A user can only delete their own messages
    match /groups/{chatId}/messages/{messageId} {
      allow create: if signedIn(request) && validateMessage(request, chatId)
      allow update: if signedIn(request) &&
                    request.resource.data.hasAll(['unseenCount']) && request.resource.data.hasOnly(['unseenCount']) &&
                    request.resource.data.unseenCount is int &&
                    request.resource.data.unseenCount == resource.data.unseenCount - 1
      allow delete: if signedIn(request) &&
                    (validateMessageDeletion(request, resource) || resource.data.unseenCount == 0)
    }

    match /groups/{chatId}/recentMsg/{docName} {
      allow create: if docName == 'default' && signedIn(request) && validateMessageCreation(request, chatId)
      allow update: if docName == 'default' && signedIn(request) && validateRecentMessageUpdation(request)
      allow delete: if docName == 'default' && signedIn(request) && validateMessageDeletion(request, resource)
    }
  }
}